using System.Collections.Generic;
using System.IO;
using System.Linq;
using UnityEngine;
using UnityEngine.SceneManagement; // シーン遷移に必要
using UnityEngine.UI;

public class SelectorController : MonoBehaviour
{
    [SerializeField] private Text textInformation;
    [SerializeField] private Text textScrollSpeed;

    // フォーマット指定文字列
    private string informationTextFormat;
    private string scrollSpeedTextFormat;

    // スクロール速度
    private float scrollSpeed = 1.0f;

    // BMSファイル一覧
    private string[] beatmapPaths;
    private List<BmsLoader> bmsLoaders;
    private BmsLoader selectedBmsLoader;

    // 選択中の譜面ID
    private int selectedIndex = 0;

    // 譜面の数
    private int beatmapCount;


    // Start is called before the first frame update
    void Start() {
        // フォルダパス
        var beatmapDirectory = Application.dataPath + "/../Beatmaps";
        // BMSファイル一覧取得
        beatmapPaths = Directory.GetFiles(beatmapDirectory, "*.bm?", SearchOption.AllDirectories);



        // 譜面情報読み込み
        bmsLoaders = new List<BmsLoader>();
        for (int i = 0; i < beatmapPaths.Length; i++) {
            try {
                bmsLoaders.Add(new BmsLoader(beatmapPaths[i]));
            } catch (KeyNotFoundException e) {
                Debug.Log(beatmapPaths[i] + " の読み込みでエラーが発生しました。");
                Debug.Log(e);
            }
        }



        selectedBmsLoader = bmsLoaders[selectedIndex];
        beatmapCount = bmsLoaders.Count();

        // 初期状態のテキスト内容
        informationTextFormat = textInformation.text;
        scrollSpeedTextFormat = textScrollSpeed.text;

        // 初期状態でテキスト更新
        ChangeSelectedIndex(selectedIndex);
        ChangeScrollSpeed(scrollSpeed);
    }

    // Update is called once per frame
    void Update() {
        // 譜面ID変更
        if (Input.GetKeyDown(KeyCode.LeftArrow)) {
            ChangeSelectedIndex(selectedIndex - 1);
        }
        if (Input.GetKeyDown(KeyCode.RightArrow)) {
            ChangeSelectedIndex(selectedIndex + 1);
        }

        // スクロール速度変更
        if (Input.GetKeyDown(KeyCode.DownArrow)) {
            ChangeScrollSpeed(scrollSpeed + 0.1f);
        }
        if (Input.GetKeyDown(KeyCode.UpArrow)) {
            ChangeScrollSpeed(scrollSpeed - 0.1f);
        }

        // 決定処理
        if (Input.GetKeyDown(KeyCode.Space)) {
            PlayerController.ScrollSpeed = scrollSpeed;
            PlayerController.beatmap = new Beatmap(beatmapPaths[selectedIndex]);
            SceneManager.LoadScene("PlayScene");
        }
    }


    private void ChangeSelectedIndex(int newIndex) {
        selectedIndex = Mathf.Clamp(newIndex, 0, beatmapCount - 1);
        selectedBmsLoader = bmsLoaders[selectedIndex];

        // 楽曲情報
        var title = selectedBmsLoader.headerData["TITLE"];
        var artist = selectedBmsLoader.headerData["ARTIST"];
        var playLevel = selectedBmsLoader.headerData["PLAYLEVEL"];
        var notesCount = selectedBmsLoader.noteProperties.Count(x => x.noteType == NoteType.Single) +
            selectedBmsLoader.noteProperties.Count(x => x.noteType == NoteType.Long) * 2;

        var minBpm = selectedBmsLoader.tempoChanges.Min(x => x.tempo);
        var maxBpm = selectedBmsLoader.tempoChanges.Max(x => x.tempo);

        // テキスト変更
        var text = string.Format(informationTextFormat,
            title, artist, playLevel, notesCount, minBpm, maxBpm);
        textInformation.text = text;

    }

    private void ChangeScrollSpeed(float newScrollSpeed) {
        scrollSpeed = Mathf.Clamp(newScrollSpeed, 0.1f, 10f);

        var text = string.Format(scrollSpeedTextFormat, scrollSpeed);
        textScrollSpeed.text = text;
    }
}
